# code_review_assistant/.env.example
# Code Review Assistant Configuration
# Copy this file to .env and update with your values

# ============================================================================
# DEPLOYMENT CONFIGURATION
# ============================================================================

# Target deployment platform: local, cloud_run, or agent_engine
# Auto-detected if not set based on environment
DEPLOYMENT_TARGET=local

# ============================================================================
# GOOGLE CLOUD CONFIGURATION
# ============================================================================

# Your Google Cloud Project ID (required for production)
# Auto-detected from gcloud auth if not set
GOOGLE_CLOUD_PROJECT=your-project-id

# Google Cloud region/location
GOOGLE_CLOUD_LOCATION=us-central1

# Use Vertex AI (true) or Google AI Studio (false)
# Vertex AI recommended for production
GOOGLE_GENAI_USE_VERTEXAI=true

# API Key for Google AI Studio (only if GOOGLE_GENAI_USE_VERTEXAI=false)
# Get from: https://makersuite.google.com/app/apikey
# GOOGLE_API_KEY=your-api-key-here

# ============================================================================
# MODEL CONFIGURATION
# ============================================================================

# Model for code analysis and style checking (fast, efficient)
WORKER_MODEL=gemini-2.0-flash

# Model for feedback synthesis (more nuanced, better reasoning)
CRITIC_MODEL=gemini-2.0-pro

# ============================================================================
# GRADING PARAMETERS
# ============================================================================

# Minimum score to pass (0.0-1.0)
PASSING_SCORE_THRESHOLD=0.8

# Weights for final grade calculation (must sum to 1.0)
STYLE_WEIGHT=0.3
TEST_WEIGHT=0.5
STRUCTURE_WEIGHT=0.2

# ============================================================================
# SAFETY AND LIMITS
# ============================================================================

# Maximum allowed code length in characters
MAX_CODE_LENGTH=10000

# Maximum timeout for test execution in seconds
MAX_TEST_TIMEOUT=5

# Maximum grading attempts per session
MAX_GRADING_ATTEMPTS=3

# Maximum number of style issues to display
MAX_STYLE_ISSUES_SHOWN=10

# ============================================================================
# FEATURE FLAGS
# ============================================================================

# Enable advanced code analysis features (experimental)
ENABLE_ADVANCED_ANALYSIS=false

# Enable AI-powered test generation
ENABLE_AI_TEST_GENERATION=true

# Enable memory service for personalization
ENABLE_MEMORY_SERVICE=true

# Enable artifact storage for reports
ENABLE_ARTIFACT_STORAGE=true

# ============================================================================
# SESSION AND MEMORY CONFIGURATION
# ============================================================================

# Session service URI (optional - auto-configured based on deployment)
# Examples:
#   Local SQLite: sqlite:///./sessions.db
#   PostgreSQL: postgresql://user:pass@host/db
#   Agent Engine: agentengine://engine-id
# SESSION_SERVICE_URI=

# Memory service URI (optional - auto-configured for Agent Engine)
# Examples:
#   Agent Engine: agentengine://engine-id
# MEMORY_SERVICE_URI=

# ============================================================================
# LOGGING AND DEBUGGING
# ============================================================================

# Logging level: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO

# Enable Google Cloud Logging (for production)
ENABLE_CLOUD_LOGGING=false

# Enable debug mode with verbose output
DEBUG_MODE=false

# Enable distributed tracing
ENABLE_TRACING=false

# ============================================================================
# CLOUD RUN SPECIFIC (auto-configured when deployed)
# ============================================================================

# Service URL (auto-detected in Cloud Run)
# CLOUD_RUN_SERVICE_URL=https://your-service.run.app

# Port for web server (Cloud Run sets this automatically)
# PORT=8080

# ============================================================================
# AGENT ENGINE SPECIFIC
# ============================================================================

# Vertex AI Agent Engine ID (for Agent Engine deployment)
# Get this after creating an Agent Engine instance
# AGENT_ENGINE_ID=your-engine-id

# GCS bucket for Agent Engine staging
# Format: gs://your-bucket-name
# STAGING_BUCKET=gs://your-staging-bucket

# ============================================================================
# DEVELOPMENT SETTINGS
# ============================================================================

# For local development with gcloud auth
# Run: gcloud auth application-default login
# This creates credentials in ~/.config/gcloud/application_default_credentials.json

# For service account authentication (production)
# Set GOOGLE_APPLICATION_CREDENTIALS to point to your service account key file
# GOOGLE_APPLICATION_CREDENTIALS=/path/to/service-account-key.json

# ============================================================================
# NOTES
# ============================================================================

# 1. For local development:
#    - Set DEPLOYMENT_TARGET=local
#    - Use either Vertex AI with gcloud auth or AI Studio with API key
#
# 2. For Cloud Run deployment:
#    - Set DEPLOYMENT_TARGET=cloud_run
#    - Ensure GOOGLE_CLOUD_PROJECT is set
#    - Use service account with appropriate permissions
#
# 3. For Agent Engine deployment:
#    - Set DEPLOYMENT_TARGET=agent_engine
#    - Set AGENT_ENGINE_ID and STAGING_BUCKET
#    - Memory and session services will use Agent Engine backend
#
# 4. Security:
#    - Never commit your actual .env file to version control
#    - Use Secret Manager for production deployments
#    - Rotate API keys regularly
#
# 5. Monitoring:
#    - Enable ENABLE_CLOUD_LOGGING for production
#    - Enable ENABLE_TRACING for performance debugging
#    - Check Cloud Monitoring dashboards for metrics
